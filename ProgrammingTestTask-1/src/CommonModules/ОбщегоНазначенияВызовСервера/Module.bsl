#Область ПрограммныйИнтерфейс

// Функция - Получает данные о сроке годности Номенклатуры в виде Структуры
// 
// Параметры:
// 	Номенклатура - СправочникСсылка.Номенклатура -
// 	ДатаПроизводства - Дата -
// Возвращаемое значение:
// 	Структура - Структура с данными о сроке годности:
// * ОкончаниеСрокаГодности - Дата -
// * СрокГодности - Число -
Функция ПолучитьДанныеОСрокеГодностиНоменклатуры(Номенклатура, ДатаПроизводства) Экспорт

	ДанныеОСрокеГодности = Новый Структура("СрокГодности, ОкончаниеСрокаГодности");

	Если НЕ ЗначениеЗаполнено(ДатаПроизводства) Тогда
		Возврат ДанныеОСрокеГодности;
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.СрокГодности КАК СрокГодности,
		|	ДОБАВИТЬКДАТЕ(&ДатаПроизводства, ДЕНЬ, Номенклатура.СрокГодности) КАК ОкончаниеСрокаГодности
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", 		Номенклатура);
	Запрос.УстановитьПараметр("ДатаПроизводства", 	ДатаПроизводства);

	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеОСрокеГодности, Выборка);
	КонецЕсли; 

	Возврат ДанныеОСрокеГодности;

КонецФункции

// Добавляет к дате количество дней
// 
// Параметры:
// 	Дата
// 	КоличествоДней
// Возвращаемое значение:
// 	Дата
Функция ДобавитьКДатеКоличествоДней(Дата, КоличествоДней) Экспорт
	СекундВСутках = 86400;
	Возврат Дата + КоличествоДней * СекундВСутках;
КонецФункции

// Вычисляет количество дней между двумя датами
// 
// Параметры:
// 	Дата1
// 	Дата2
// Возвращаемое значение:
// 	Число - Количество дней между двумя датами
Функция ВычислитьКоличествоДнейМеждуДатами(Дата1, Дата2) Экспорт
	СекундВСутках = 86400;
	Возврат (Дата1 - Дата2) / СекундВСутках;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура СписаниеПросрочки() Экспорт
	КонецВчерашнегоДня = НачалоДня(ТекущаяДатаСеанса()) - 1;

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОстаткиТоваров");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ОкончаниеСрокаГодности", Новый Диапазон(, КонецВчерашнегоДня));
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОстаткиТоваровОстатки.Номенклатура КАК Номенклатура,
			|	ОстаткиТоваровОстатки.ОкончаниеСрокаГодности КАК ОкончаниеСрокаГодности,
			|	ОстаткиТоваровОстатки.КоличествоОстаток КАК Количество,
			|	ОстаткиТоваровОстатки.СтоимостьОстаток КАК Стоимость
			|ИЗ
			|	РегистрНакопления.ОстаткиТоваров.Остатки(, ОкончаниеСрокаГодности < &ТекущаяДата) КАК ОстаткиТоваровОстатки";
		
		Запрос.УстановитьПараметр("ТекущаяДата", КонецВчерашнегоДня);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Списание = Документы.СписаниеПросрочки.СоздатьДокумент();
			Списание.Дата = КонецВчерашнегоДня;
			Списание.Товары.Загрузить(РезультатЗапроса.Выгрузить());
			Списание.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстОшибки = СтрШаблон("При автоматическом списании просрочки произошла ошибка: %1", ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("Автоматическое списание просрочки", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецПопытки;

КонецПроцедуры

#КонецОбласти